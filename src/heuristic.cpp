#include "data.h"

// generated by python
// List of which 5 position are part of each of the 32 win lines
const size_t positions_by_win[32][5] = {
    // horizontal
    {0,1,2,3,4},
    {1,2,3,4,5},
    {6,7,8,9,10},
    {7,8,9,10,11},
    {12,13,14,15,16},
    {13,14,15,16,17},
    {18,19,20,21,22},
    {19,20,21,22,23},
    {24,25,26,27,28},
    {25,26,27,28,29},
    {30,31,32,33,34},
    {31,32,33,34,35},
    // vertical
    {0,6,12,18,24},
    {6,12,18,24,30},
    {1,7,13,19,25},
    {7,13,19,25,31},
    {2,8,14,20,26},
    {8,14,20,26,32},
    {3,9,15,21,27},
    {9,15,21,27,33},
    {4,10,16,22,28},
    {10,16,22,28,34},
    {5,11,17,23,29},
    {11,17,23,29,35},
    // diag
    {0,7,14,21,28},
    {1,8,15,22,29},
    {6,13,20,27,34},
    {7,14,21,28,35},
    // diag
    {4,9,14,19,24},
    {5,10,15,20,25},
    {10,15,20,25,30},
    {11,16,21,26,31},
};

// generated by python
// each position has 2 bits, this takes all 10 bits from any given "win line" and translates it to a value
// the heuristic is always a total of this value for all 32 win lines on the board
const int16_t heuristic_value[1024] = {
    0,    1,    1,    0,    1,    2,   -1,    1,    1,   -1,    2,    1,    0,    1,    1,    0,
    1,    2,   -1,    1,    2,    4,   -1,    2,   -1,   -1,   -1,   -1,    1,    2,   -1,    1,
    1,   -1,    2,    1,   -1,   -1,   -1,   -1,    2,   -1,    4,    2,    1,   -1,    2,    1,
    0,    1,    1,    0,    1,    2,   -1,    1,    1,   -1,    2,    1,    0,    1,    1,    0,
    1,    2,   -1,    1,    2,    4,   -1,    2,   -1,   -1,   -1,   -1,    1,    2,   -1,    1,
    2,    4,   -1,    2,    4,    6,   -1,    4,   -1,   -1,   -1,   -1,    2,    4,   -1,    2,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    1,    2,   -1,    1,    2,    4,   -1,    2,   -1,   -1,   -1,   -1,    1,    2,   -1,    1,
    1,   -1,    2,    1,   -1,   -1,   -1,   -1,    2,   -1,    4,    2,    1,   -1,    2,    1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    2,   -1,    4,    2,   -1,   -1,   -1,   -1,    4,   -1,    6,    4,    2,   -1,    4,    2,
    1,   -1,    2,    1,   -1,   -1,   -1,   -1,    2,   -1,    4,    2,    1,   -1,    2,    1,
    0,    1,    1,    0,    1,    2,   -1,    1,    1,   -1,    2,    1,    0,    1,    1,    0,
    1,    2,   -1,    1,    2,    4,   -1,    2,   -1,   -1,   -1,   -1,    1,    2,   -1,    1,
    1,   -1,    2,    1,   -1,   -1,   -1,   -1,    2,   -1,    4,    2,    1,   -1,    2,    1,
    0,    1,    1,    0,    1,    2,   -1,    1,    1,   -1,    2,    1,    0,    1,    1,    0,
    1,    2,   -1,    1,    2,    4,   -1,    2,   -1,   -1,   -1,   -1,    1,    2,   -1,    1,
    2,    4,   -1,    2,    4,    6,   -1,    4,   -1,   -1,   -1,   -1,    2,    4,   -1,    2,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    1,    2,   -1,    1,    2,    4,   -1,    2,   -1,   -1,   -1,   -1,    1,    2,   -1,    1,
    2,    4,   -1,    2,    4,    6,   -1,    4,   -1,   -1,   -1,   -1,    2,    4,   -1,    2,
    4,    6,   -1,    4,    6, 1024,   -1,    6,   -1,   -1,   -1,   -1,    4,    6,   -1,    4,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    2,    4,   -1,    2,    4,    6,   -1,    4,   -1,   -1,   -1,   -1,    2,    4,   -1,    2,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    1,    2,   -1,    1,    2,    4,   -1,    2,   -1,   -1,   -1,   -1,    1,    2,   -1,    1,
    2,    4,   -1,    2,    4,    6,   -1,    4,   -1,   -1,   -1,   -1,    2,    4,   -1,    2,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    1,    2,   -1,    1,    2,    4,   -1,    2,   -1,   -1,   -1,   -1,    1,    2,   -1,    1,
    1,   -1,    2,    1,   -1,   -1,   -1,   -1,    2,   -1,    4,    2,    1,   -1,    2,    1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    2,   -1,    4,    2,   -1,   -1,   -1,   -1,    4,   -1,    6,    4,    2,   -1,    4,    2,
    1,   -1,    2,    1,   -1,   -1,   -1,   -1,    2,   -1,    4,    2,    1,   -1,    2,    1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    2,   -1,    4,    2,   -1,   -1,   -1,   -1,    4,   -1,    6,    4,    2,   -1,    4,    2,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    4,   -1,    6,    4,   -1,   -1,   -1,   -1,    6,   -1, 1024,    6,    4,   -1,    6,    4,
    2,   -1,    4,    2,   -1,   -1,   -1,   -1,    4,   -1,    6,    4,    2,   -1,    4,    2,
    1,   -1,    2,    1,   -1,   -1,   -1,   -1,    2,   -1,    4,    2,    1,   -1,    2,    1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    2,   -1,    4,    2,   -1,   -1,   -1,   -1,    4,   -1,    6,    4,    2,   -1,    4,    2,
    1,   -1,    2,    1,   -1,   -1,   -1,   -1,    2,   -1,    4,    2,    1,   -1,    2,    1,
    0,    1,    1,    0,    1,    2,   -1,    1,    1,   -1,    2,    1,    0,    1,    1,    0,
    1,    2,   -1,    1,    2,    4,   -1,    2,   -1,   -1,   -1,   -1,    1,    2,   -1,    1,
    1,   -1,    2,    1,   -1,   -1,   -1,   -1,    2,   -1,    4,    2,    1,   -1,    2,    1,
    0,    1,    1,    0,    1,    2,   -1,    1,    1,   -1,    2,    1,    0,    1,    1,    0,
    1,    2,   -1,    1,    2,    4,   -1,    2,   -1,   -1,   -1,   -1,    1,    2,   -1,    1,
    2,    4,   -1,    2,    4,    6,   -1,    4,   -1,   -1,   -1,   -1,    2,    4,   -1,    2,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    1,    2,   -1,    1,    2,    4,   -1,    2,   -1,   -1,   -1,   -1,    1,    2,   -1,    1,
    1,   -1,    2,    1,   -1,   -1,   -1,   -1,    2,   -1,    4,    2,    1,   -1,    2,    1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    2,   -1,    4,    2,   -1,   -1,   -1,   -1,    4,   -1,    6,    4,    2,   -1,    4,    2,
    1,   -1,    2,    1,   -1,   -1,   -1,   -1,    2,   -1,    4,    2,    1,   -1,    2,    1,
    0,    1,    1,    0,    1,    2,   -1,    1,    1,   -1,    2,    1,    0,    1,    1,    0,
    1,    2,   -1,    1,    2,    4,   -1,    2,   -1,   -1,   -1,   -1,    1,    2,   -1,    1,
    1,   -1,    2,    1,   -1,   -1,   -1,   -1,    2,   -1,    4,    2,    1,   -1,    2,    1,
    0,    1,    1,    0,    1,    2,   -1,    1,    1,   -1,    2,    1,    0,    1,    1,    0
};

const int16_t chaos_wins = -1024;

// Total the heuristic value for all 32 possible win lines
int board_t::heuristic() const {
    int total = 0;
    for(size_t i=0; i<32; i++) {
        const size_t* positions = positions_by_win[i];
        const size_t win_state =
                            data[positions[0]] << 8 |
                            data[positions[1]] << 6 |
                            data[positions[2]] << 4 |
                            data[positions[3]] << 2 |
                            data[positions[4]];
        total += heuristic_value[win_state];
    }
    // 32 of -1 is a win for chaos, (no win lines left)
    if (total == -32) {
        total = chaos_wins;
    }
    return total;
}